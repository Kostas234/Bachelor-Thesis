2.2 Shift


Ο αλγόριθμος LCS Shift κάνει τις παρακάτω ενέργειες: του δίνουμε είσοδο δύο strings έστω x, y και δημιουργεί δύο νέα strings sx και sy όπου το sx έχει στις πρώτες του θέσεις το string x και στις υπόλοιπες τόσα κενά όσο το μέγεθος του string y μείον 1, ενώ το sy έχει στις πρώτες θέσεις κενά όσα το μέγεθος του string x μείον 1 και στις υπόλοιπες το string y. Έπειτα συγκρίνει το τελευταίο χαρακτήρα του x με τον πρώτο χαρακτήρα του y βρίσκοντας το μέγιστο κοινό substring και κάνει δεξί shift στο string x μέχρι να φτάσει στην τελευταία θέση του sx, συγκρίνοντας κάθε φορά τα νέα στοιχεία. Όταν βρίσκει κάποιο LCS μεγαλύτερο από το προηγούμενο θέτει αυτό ως το μεγαλύτερο και συνεχίζει κάνοντας κάθε φορά τον ίδιο έλεγχο. Όταν φτάσει στο τέλος του sx επαναλαμβάνει την ίδια διαδικασία κάνοντας όμως αυτή τη φορά αριστερό shift το y μέχρι να φτάσει την πρώτη θέση του sy.
Ακολουθεί ένα απλό παράδειγμα εφαρμογής του αλγορίθμου για είσοδο δύο μικρά string.

	




Σχήμα 1.4: Εφαρμογή του αλγορίθμου Shift για 
			      εύρεση του LCS των x, y. Ο αλγόριθμος μετά το βήμα (δ)
			      θα συνεχίσει την εκτέλεσή του με το sy να κάνει αριστερές ολισθήσεις 			      μέχρι το πρώτο στοιχείο του y να φτάσει στην πωτη θέση, ωστόσο το 			      LCS που βρέθηκε μέχρι εκείνη την στιγμή θα παραμείνει το μέγιστο




Πολυπλοκότητα χρόνου: Αν τα string εισόδου x, y έχουν μήκη m και n αντίστοιχα, τότε αφού θα εξεταστούν όλα τα substrings των δύο string κατά την ολίσθησή τους δεξιά για το x και αριστερά για το y, θα χρειαστεί χρόνος πολυπλοκότητας Ο(m*n) για να βρεθεί το τελικό LCS με χρήση του shift αλγορίθμου.



lcs_shift



# LCS Shift

def lcs(x, y):
    a=list(x)
    b=list(y)
    if a == [] or b == []:
        return []
 
    l = len(a) + len(b) - 1 
    sa = a + (len(b) - 1) * ['']
    sb = (len(a) - 1) * [''] + b
    longest = []
 
    for k in range(l):
        cur = []
 
        for c in range(l):
            if sa[c] != '' and sb[c] != '' and sa[c] == sb[c]:
                cur.append(sa[c])
            else:
                if len(cur) > len(longest):
                    longest = cur
                cur = []
 
        if len(cur) > len(longest):
            longest = cur
 
        if sa[len(sa) - 1] == '':
            # Shift 'a' to the right.
            sa = [''] + sa[: len(sa) - 1]
        else:
            # Shift 'b' to the left.
            sb = sb[1:] + ['']
 
    return ''.join(longest)
